@page "/variables"
@using HomeAssistantStateMachine.Services
@using HomeAssistantStateMachine.Models
@using System.Collections.Concurrent
@inject VariableService VariableService
@implements IDisposable

<PageTitle>HASM - Variables</PageTitle>

<h1>Variables</h1>

@if (variables != null)
{
    <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.SimpleWithMenu"
                    AllowSorting="true"
                    PageSize="20"
                    AllowPaging="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@variables.Values.ToList()"
                    TItem="VariableInfo"
                    ColumnWidth="300px">
        <Columns>
            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Name)"
                                  Title="Name" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Data)"
                                  Title="Data" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Value)"
                                  Title="Value" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Filterable="false"
                                  Property="@nameof(VariableInfo.Update)"
                                  Title="Update" FormatString="{0:HH:mm.sss}" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private class VariableInfo
    {
        public Variable? Variable { get; set; } = null!;
        public VariableValue? VariableValue { get; set; }
        public VariableService.CountdownTimer? Timer { get; set; }

        public string Name => Variable?.Name ?? Timer?.Name ?? "";
        public string? Data => Variable?.Data ?? "";
        public string? Value => VariableValue?.Value ?? Timer?.Value.ToString() ?? "";
        public DateTime? Update => (VariableValue?.Update ?? Timer?.Start)?.ToLocalTime();
    }
    private readonly ConcurrentDictionary<int, VariableInfo> variables = [];

    private RadzenDataGrid<VariableInfo>? grid;

    protected override void OnInitialized()
    {
        var allVariables = VariableService.GetVariables();
        foreach (var variable in allVariables)
        {
            var v = new VariableInfo()
                {
                    Variable = variable.variable,
                    VariableValue = variable.variableValue
                };
            variables.TryAdd(variable.variable.Id, v);
        }
        UpdateCountdownTimers();
        VariableService.VariableValueChanged += VariableValueChanged;
        VariableService.CountdownTimerChanged += CountdownTimerChanged;
        base.OnInitialized();
    }

    private void UpdateCountdownTimers()
    {
        var allTimers = VariableService.AllCountDownTimers();
        foreach (var timer in allTimers)
        {
            if (variables!.TryGetValue(timer!.Id, out var v))
            {
                v.Timer = timer;
            }
            else
            {
                var vi = new VariableInfo()
                    {
                        Timer = timer
                    };
                variables.TryAdd(timer.Id, vi);
            }
        }
        foreach (var v in variables.Values.ToList())
        {
            if (v.Timer != null && !allTimers.Any(x => x.Id == v.Timer.Id))
            {
                variables.TryRemove(v.Timer!.Id, out var _);
            }
        }
    }

    private void CountdownTimerChanged(object? sender, EventArgs e)
    {
        Task.Yield();
        UpdateCountdownTimers();
        if (grid != null)
        {
            InvokeAsync(grid.Reload);
        }
    }

    private void VariableValueChanged(object? sender, VariableValue e)
    {
        Task.Yield();
        if (variables!.TryGetValue(e.Variable!.Id, out var v))
        {
            v.VariableValue = e;
        }
        else
        {
            var newVariable = VariableService.GetVariables().Where(x => x.variable.Id == e.Variable.Id).First();
            var vi = new VariableInfo()
                {
                    Variable = newVariable.variable,
                    VariableValue = newVariable.variableValue
                };
            variables.TryAdd(newVariable.variable.Id, vi);
        }
        if (grid != null)
        {
            InvokeAsync(grid!.Reload);
        }
    }

    public void Dispose()
    {
        VariableService.CountdownTimerChanged -= CountdownTimerChanged;
        VariableService.VariableValueChanged -= VariableValueChanged;
    }
}