@page "/variables"
@using HomeAssistantStateMachine.Services
@using HomeAssistantStateMachine.Models
@using System.Collections.Concurrent
@inject DialogService DialogService
@inject VariableService VariableService
@inject HAClientService HAClientService
@inject StateMachineService StateMachineService
@implements IDisposable

<PageTitle>HASM - Variables</PageTitle>

<h1>Variables</h1>

@if (gridData != null)
{
    <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.SimpleWithMenu"
                    AllowSorting="true"
                    PageSize="20"
                    AllowColumnPicking="true"
                    AllowColumnReorder="true"
                    AllowPaging="true"
                    AllowVirtualization="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@gridData"
                    TItem="VariableInfo"
                    ColumnWidth="300px">
        <Columns>
            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Name)"
                                  Title="Name" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.HAClientName)"
                                  Title="HA Client" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.StateMachineName)"
                                  Title="State Machine" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Data)"
                                  Title="Data" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Property="@nameof(VariableInfo.Value)"
                                  Title="Value" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Filterable="false"
                                  Property="@nameof(VariableInfo.Update)"
                                  Title="Update" FormatString="{0:HH:mm.sss}" />

            <RadzenDataGridColumn TItem="VariableInfo"
                                  Filterable="false"
                                  Sortable="false"
                                  Property="@nameof(VariableInfo.Id)"
                                  Title="">
                <Template Context="variable">
                    <RadzenButton Disabled=@(variable.Timer != null) ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Text="Delete" Click="@(() => DeleteVariableAsync(variable))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private class VariableInfo
    {
        private readonly StateMachineService _stateMachineService;

        public VariableInfo(StateMachineService stateMachineService)
        {
            _stateMachineService = stateMachineService;
        }

        public Variable? Variable { get; set; } = null!;
        public VariableValue? VariableValue { get; set; }
        public VariableService.CountdownTimer? Timer { get; set; }

        public int Id => Variable?.Id ?? Timer?.Id ?? 0;
        public string Name => VariableName();
        public string? Data => Variable?.Data ?? "";
        public string? Value => VariableValue?.Value ?? Timer?.Value.ToString() ?? "";
        public DateTime? Update => (VariableValue?.Update ?? Timer?.Start)?.ToLocalTime();
        public string? HAClientName => Variable?.HAClient?.Name ?? "";
        public string? StateMachineName => Variable?.StateMachine?.Id == null ? "" : _stateMachineService.GetStateMachine(Variable.StateMachine.Id).StateMachine.Name;

        private string VariableName()
        {
            var result = Variable?.Name ?? Timer?.Name ?? "";
            if (Variable?.StateMachineId != null || Variable?.HAClientId != null)
            {
                result = Variable.Name.Split("__", 3, StringSplitOptions.None)[2];
            }
            return result;
        }
    }
    private readonly ConcurrentDictionary<int, VariableInfo> variables = [];

    private RadzenDataGrid<VariableInfo>? grid;
    private List<VariableInfo>? gridData;

    protected override void OnInitialized()
    {
        var allVariables = VariableService.GetVariables();
        foreach (var variable in allVariables)
        {
            var v = new VariableInfo(StateMachineService)
                {
                    Variable = variable.variable,
                    VariableValue = variable.variableValue
                };
            variables.TryAdd(variable.variable.Id, v);
        }
        UpdateCountdownTimers();
        VariableService.VariableValueChanged += VariableValueChanged;
        VariableService.CountdownTimerChanged += CountdownTimerChanged;
        VariableService.VariableCollectionChanged += VariableCollectionChanged;
        gridData = variables.Values.ToList();
        base.OnInitialized();
    }

    private bool UpdateCountdownTimers()
    {
        var result = false;
        var allTimers = VariableService.AllCountDownTimers();
        foreach (var timer in allTimers)
        {
            if (variables!.TryGetValue(timer!.Id, out var v))
            {
                v.Timer = timer;
            }
            else
            {
                var vi = new VariableInfo(StateMachineService)
                    {
                        Timer = timer
                    };
                variables.TryAdd(timer.Id, vi);
                result = true;
            }
        }
        foreach (var v in variables.Values.ToList())
        {
            if (v.Timer != null && !allTimers.Any(x => x.Id == v.Timer.Id))
            {
                variables.TryRemove(v.Timer!.Id, out var _);
                result = true;
            }
        }
        return result;
    }

    private void CountdownTimerChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            if (UpdateCountdownTimers())
            {
                UpdateGridData();
            }
            else
            {
                grid.Reload();
            }
        });
    }

    private void UpdateGridData()
    {
        gridData = variables.Values.ToList();
        if (grid != null)
        {
            grid.Data = gridData;
            grid!.Reload();
        }
    }

    private async Task DeleteVariableAsync(VariableInfo vi)
    {
        if (await DialogService.ShowNoYesCancelConfirmationDialogAsync("Delete Variable(s)", $"Are you sure you want variables?") == Dialogs.ConfirmationDialog.DialogButton.Yes)
        {
            if (vi.Variable?.HAClientId != null)
            {
                await HAClientService.GetClients().First(x => x.HAClient.Id == vi.Variable?.HAClientId).DeleteVariableAsync(vi.Variable.Name);
            }
            else
            {
                await VariableService.DeleteVariableAsync(vi.Variable!.Name);
            }
        }
    }

    private void VariableCollectionChanged(object? sender, EventArgs e)
    {
        InvokeAsync(() =>
        {
            variables.Clear();
            var allVariables = VariableService.GetVariables();
            foreach (var variable in allVariables)
            {
                var v = new VariableInfo(StateMachineService)
                    {
                        Variable = variable.variable,
                        VariableValue = variable.variableValue
                    };
                variables.TryAdd(variable.variable.Id, v);
            }
            UpdateCountdownTimers();
            UpdateGridData();
        });
    }

    private void VariableValueChanged(object? sender, VariableValue e)
    {
        InvokeAsync(() =>
          {
              if (variables!.TryGetValue(e.Variable!.Id, out var v))
              {
                  v.VariableValue = e;
                  grid!.Reload();
              }
              else
              {
                  var newVariable = VariableService.GetVariables().Where(x => x.variable.Id == e.Variable.Id).First();
                  var vi = new VariableInfo(StateMachineService)
                      {
                          Variable = newVariable.variable,
                          VariableValue = newVariable.variableValue
                      };
                  variables.TryAdd(newVariable.variable.Id, vi);
                  UpdateGridData();
              }
          });
    }

    public void Dispose()
    {
        VariableService.VariableCollectionChanged -= VariableCollectionChanged;
        VariableService.CountdownTimerChanged -= CountdownTimerChanged;
        VariableService.VariableValueChanged -= VariableValueChanged;
    }
}