@page "/mqttclients"
@using HomeAssistantStateMachine.Services
@inject MqttClientService MqttClientService
@inject DialogService DialogService
@implements IDisposable

<PageTitle>HASM - MQTT Clients</PageTitle>

<h1>MQTT Clients</h1>

@if (clients != null)
{
    <RadzenButton Size="ButtonSize.Small" Text="Add MQTT Client" Click="@(() => AddOrEditMqttClientAsync(null))" />

    foreach (var client in clients.Values)
    {
        <RadzenCard onclick="@(() => AddOrEditMqttClientAsync(client))">
            <div>@client.MqttClient.Name</div>
            <div>@client.MqttClient.Host</div>
            <div>@(client.MqttClient.Enabled ? "Enabled" : "Disabled")</div>
            <div>@(client.Connected ? "Connected" : "Disconnected")</div>
            <div @onclick:stopPropagation="true">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Text="Delete" Click="@(() => OnDeleteAsync(client))" />
            </div>
        </RadzenCard>
    }
}

@code {

    private Dictionary<int, MqttClientHandler>? clients;

    protected override void OnInitialized()
    {
        clients = MqttClientService.GetClients().ToDictionary(x => x.MqttClient.Id, x => x);
        MqttClientService.ConnectionChanged += ClientConnectionChanged;
        base.OnInitialized();
    }

    private void ClientConnectionChanged(object? sender, bool e)
    {
        var client = sender as MqttClientHandler;
        if (client != null && clients!.ContainsKey(client.MqttClient.Id))
        {
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        MqttClientService.ConnectionChanged -= ClientConnectionChanged;
    }

    private async Task OnDeleteAsync(MqttClientHandler mqttClient)
    {
        if (await DialogService.ShowNoYesConfirmationDialogAsync("Delete MQTT Client", $"Are you sure you want to delete the MQTT Client '{mqttClient.MqttClient.Name}'?") == Dialogs.ConfirmationDialog.DialogButton.Yes)
        {
            await MqttClientService.DeleteMqttClientAsync(mqttClient);
            clients = MqttClientService.GetClients().ToDictionary(x => x.MqttClient.Id, x => x);
            StateHasChanged();
        }
    }

    private async Task AddOrEditMqttClientAsync(MqttClientHandler? mqttClient)
    {
        var result = await DialogService.ShowDialogAsync<Dialogs.AddOrEditMqttClientDialog, Models.MqttClient>($"{(mqttClient == null ? "Add" : "Edit")} MQTT Client", dialog =>
        {
            dialog.MqttClient = mqttClient?.MqttClient;
            dialog.ExistingMqttClientNames = MqttClientService.GetClients()!.Where(x => x.MqttClient.Id != mqttClient?.MqttClient.Id).Select(x => x.MqttClient.Name).ToHashSet();
        });
        if (result != null)
        {
            if (mqttClient == null)
            {
                await MqttClientService.CreateMqttClientAsync(result);
            }
            else
            {
                await MqttClientService.UpdateMqttClientAsync(mqttClient, result);
            }
            clients = MqttClientService.GetClients().ToDictionary(x => x.MqttClient.Id, x => x);
            StateHasChanged();
        }
    }
}