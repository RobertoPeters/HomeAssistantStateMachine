@page "/editstatemachine/{Id:int}"
@inject StateMachineService StateMachineService
@using Blazor.Diagrams.Core.Models
@using HomeAssistantStateMachine.Models
@using HomeAssistantStateMachine.Services
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Components

<PageTitle>HASM - Edit State Machine</PageTitle>

@if (StateMachineHandler != null)
{
    <RadzenLayout>
        <RadzenSidebar>
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Add State" Click="@AddState" />
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <h1>Edit State Machine: @StateMachineHandler.StateMachine.Name</h1>

            <div class="diagram-container" style="width: 100%;height: 400px;border: 1px solid black;">
                <CascadingValue Value="Diagram" IsFixed="true">
                    <DiagramCanvas></DiagramCanvas>
                </CascadingValue>
            </div>
        </RadzenBody>
    </RadzenLayout>
 }
else
{
    <h1>Edit State Machine</h1>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private sealed class NodeUIData
    {
        public int X { get; set; } = 50;
        public int Y { get; set; } = 50;
    }

    private StateMachineHandler? StateMachineHandler;
    private BlazorDiagram Diagram { get; set; } = null!;
    private List<State> States = null!;
    private List<Transition> Transitions = null!;

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = false,
                Zoom =
                {
                    Enabled = true,
                },
                Links =
                {
                    DefaultRouter = new NormalRouter(),
                    DefaultPathGenerator = new SmoothPathGenerator()
                },
            };

        Diagram = new BlazorDiagram(options);
        StateMachineHandler = StateMachineService.GetStateMachines().First(x => x.StateMachine.Id == Id);

        States = StateMachineHandler.StateMachine.States.ToList().CopyObject()!;
        Transitions = StateMachineHandler.StateMachine.Transitions.ToList().CopyObject()!;

        base.OnInitialized();
    }


    void AddState()
    {
        //todo: dialog for name and actio code
        var uiData = new NodeUIData();
        var state = new State()
            {
                Name = "Test",
                UIData = System.Text.Json.JsonSerializer.Serialize(uiData)
            };
        States.Add(state);

        var node = Diagram.Nodes.Add(new NodeModel(
              
              position: new Blazor.Diagrams.Core.Geometry.Point(uiData.X, uiData.Y))
            {
                Title = "Test"
            });

        Diagram.Refresh();
    }

}
