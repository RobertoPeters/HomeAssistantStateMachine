@page "/editstatemachine/{Id:int}"
@inject StateMachineService StateMachineService
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Models.Base
@using HomeAssistantStateMachine.Models
@using HomeAssistantStateMachine.Services
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Components
@implements IDisposable

<PageTitle>HASM - Edit State Machine</PageTitle>

@if (StateMachineHandler != null)
{
    <h1>Edit State Machine: @StateMachineHandler.StateMachine.Name</h1>
    <RadzenButton Text="Add State" Click="@AddState" />
    <RadzenButton Text="Save" Click="@SaveAsync" />
    <RadzenButton Text="Reload" Click="@ReloadDiagram" />

    <div class="diagram-container" style="width: 100%;height: 800px;border: 1px solid black;">
        <CascadingValue Value="Diagram" IsFixed="true">
            <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
    </div>
}
else
{
    <h1>Edit State Machine</h1>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private sealed class NodeUIData
    {
        public int X { get; set; } = 50;
        public int Y { get; set; } = 50;
    }

    private StateMachineHandler? StateMachineHandler;
    private BlazorDiagram Diagram { get; set; } = null!;
    private StateMachine StateMachine = null!;

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = false,
                Zoom =
                {
                    Enabled = true,
                },
                Links =
                {
                    DefaultRouter = new NormalRouter(),
                    DefaultPathGenerator = new SmoothPathGenerator(),
                    RequireTarget = true,
                    Factory = (diagram, source, targetAnchor) =>
                    {
                        Anchor? source2;
                        if (!(source is NodeModel model3))
                        {
                            if (!(source is PortModel port2))
                            {
                                throw new NotImplementedException();
                            }

                            source2 = new SinglePortAnchor(port2);
                        }
                        else
                        {
                            source2 = new ShapeIntersectionAnchor(model3);
                        }

                        var linkModel = new LinkModel(source2, targetAnchor);
                        linkModel.TargetMarker = LinkMarker.Arrow;
                        return linkModel;
                    }
                },
            };

        Diagram = new BlazorDiagram(options);
        Diagram.PointerDoubleClick += DiagramPointerDoubleClick;
        StateMachineHandler = StateMachineService.GetStateMachines().First(x => x.StateMachine.Id == Id);

        ReloadDiagram();

        base.OnInitialized();
    }

    void ReloadDiagram()
    {
        Diagram.Links.Clear();
        Diagram.Nodes.Clear();
        StateMachine = StateMachineHandler!.StateMachine.CopyObject()!;
        Diagram.Refresh();
    }

    public void Dispose()
    {
        Diagram.PointerDoubleClick -= DiagramPointerDoubleClick;
    }

    void AddState()
    {
        //todo: dialog for name and actio code
        var state = new State()
            {
                Name = "Test",
                UIData = null
            };
        StateMachine.States.Add(state);

        var node = Diagram.Nodes.Add(new NodeModel(

              position: new Blazor.Diagrams.Core.Geometry.Point(50, 50))
            {
                Title = $"Test {Diagram.Nodes.Count}"
            });

        node.AddPort(PortAlignment.Bottom);
        node.AddPort(PortAlignment.Top);
        Diagram.Refresh();
    }

    void DiagramPointerDoubleClick(Model? model, Blazor.Diagrams.Core.Events.PointerEventArgs args)
    {

    }

    async Task SaveAsync()
    {
        await StateMachineService.UpdateMachineStateAsync(StateMachine);
    }
}
