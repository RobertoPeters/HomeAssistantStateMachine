@page "/editstatemachine/{Id:int}"
@inject StateMachineService StateMachineService
@inject DialogService DialogService
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Models.Base
@using HomeAssistantStateMachine.Models
@using HomeAssistantStateMachine.Services
@using Blazor.Diagrams;
@using Blazor.Diagrams.Core.PathGenerators;
@using Blazor.Diagrams.Core.Routers;
@using Blazor.Diagrams.Options;
@using Blazor.Diagrams.Core.Geometry;
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets;
@implements IDisposable

<PageTitle>HASM - Edit State Machine</PageTitle>

@if (StateMachine != null)
{
    <h1>Edit State Machine: @StateMachine.Name (@(StateMachineHandler?.CurrentState?.Name ?? "-"))</h1>
    <RadzenButton Text="Add State" Click="@AddStateAsync" />
    <RadzenButton Text="Save" Click="@SaveAsync" />
    <RadzenButton Text="Restart" Click="@Restart" />
    <RadzenButton Text="Reload" Click="@ReloadDiagramAsync" />

    <div class="diagram-container" style="width: 100%;height: 800px;border: 1px solid black;">
        <CascadingValue Value="Diagram" IsFixed="true">
            <DiagramCanvas>
                <Widgets>
                    <SelectionBoxWidget />
                </Widgets>
            </DiagramCanvas>
        </CascadingValue>
    </div>
}
else
{
    <h1>Edit State Machine</h1>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private sealed class NodeUIData
    {
        public int X { get; set; } = 50;
        public int Y { get; set; } = 50;
    }

    private BlazorDiagram Diagram { get; set; } = null!;
    private StateMachine StateMachine = null!;
    private StateMachineHandler StateMachineHandler = null!;
    private int newIdForAdd = -1;

    protected override async Task OnInitializedAsync()
    {
        StateMachineHandler = StateMachineService.GetStateMachine(Id);
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = false,
                Zoom =
                {
                    Enabled = true,
                },
                Links =
                {
                    DefaultRouter = new NormalRouter(),
                    DefaultPathGenerator = new SmoothPathGenerator(),
                    RequireTarget = true,
                    Factory = (diagram, source, targetAnchor) =>
                    {
                        Anchor? source2;
                        if (!(source is NodeModel model3))
                        {
                            if (!(source is PortModel port2))
                            {
                                throw new NotImplementedException();
                            }

                            source2 = new SinglePortAnchor(port2);
                        }
                        else
                        {
                            source2 = new ShapeIntersectionAnchor(model3);
                        }

                        var linkModel = new LinkModel(source2, targetAnchor);
                        linkModel.TargetMarker = LinkMarker.Arrow;
                        linkModel.AddLabel("true");

                        return linkModel;
                    }
                },
            };

        Diagram = new BlazorDiagram(options);
        Diagram.PointerDoubleClick += DiagramPointerDoubleClickAsync;
        Diagram.PointerUp += DiagramPointerUpAsync;
        StateMachineHandler.StateChanged += StateChanged;

        await ReloadDiagramAsync();

        await base.OnInitializedAsync();
    }

    void StateChanged(object? sender, State? state)
    {
        InvokeAsync(() =>
        {
            var currentState = StateMachineHandler.CurrentState;
            if (Diagram != null)
            {
                if (currentState != null)
                {
                    foreach (var node in Diagram.Nodes)
                    {
                        if (node.Title == currentState!.Name)
                        {
                            Diagram.SelectModel(node, true);
                            break;
                        }
                    }
                }
                else
                {
                    Diagram.UnselectAll();
                }
            }
        });
    }

    async Task ReloadDiagramAsync()
    {
        Diagram.Links.Clear();
        Diagram.Nodes.Clear();
        StateMachine = await StateMachineService.GetStateMachineDataAsync(Id);
        foreach (var state in StateMachine.States)
        {
            state.StateMachine = null;
            var uiData = System.Text.Json.JsonSerializer.Deserialize<NodeUIData>(state.UIData!);
            var node = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(uiData!.X, uiData.Y))
                {
                    Title = state.Name
                });

            node.AddPort(PortAlignment.Bottom);
            node.AddPort(PortAlignment.Top);
        }
        foreach (var transition in StateMachine.Transitions)
        {
            transition.FromState = null;
            transition.ToState = null;
            transition.StateMachine = null;
            var source = Diagram.Nodes.First(x => x.Title == StateMachine.States.First(y => y.Id == transition.FromStateId)!.Name);
            var target = Diagram.Nodes.First(x => x.Title == StateMachine.States.First(y => y.Id == transition.ToStateId)!.Name);
            var link = Diagram.Links.Add(new LinkModel(source.Ports.First(x => x.Alignment == PortAlignment.Bottom), target.Ports.First(x => x.Alignment == PortAlignment.Top)));
            link.TargetMarker = LinkMarker.Arrow;
            link.AddLabel(transition.Description ?? transition.Condition ?? "true");
        }
        StateChanged(null, null);
        Diagram.Refresh();
    }

    public void Dispose()
    {
        StateMachineHandler.StateChanged -= StateChanged;
        Diagram.PointerDoubleClick -= DiagramPointerDoubleClickAsync;
    }

    async Task AddStateAsync()
    {
        var state = await DialogService.ShowDialogAsync<Dialogs.AddOrEditStateDialog, State>("Add State", dialog =>
        {
            dialog.ExistingStateNames = StateMachine.States.Select(x => x.Name).Distinct().ToHashSet();
        });
        if (state != null)
        {
            newIdForAdd--;
            state.Id = newIdForAdd;
            StateMachine.States.Add(state);

            var node = Diagram.Nodes.Add(new NodeModel(position: new Blazor.Diagrams.Core.Geometry.Point(50, 50))
                {
                    Title = state.Name
                });

            node.AddPort(PortAlignment.Bottom);
            node.AddPort(PortAlignment.Top);
            Diagram.Refresh();
        }
    }

    async void DiagramPointerUpAsync(Model? model, Blazor.Diagrams.Core.Events.PointerEventArgs args)
    {
        //check if link is added
        foreach (var link in Diagram.Links)
        {
            var source3 = ((Blazor.Diagrams.Core.Anchors.SinglePortAnchor)link.Source).Port.Parent;
            var target = ((Blazor.Diagrams.Core.Anchors.SinglePortAnchor)link.Target).Port.Parent;
            var sourceState = StateMachine.States.First(x => x.Name == source3.Title);
            var targetState = StateMachine.States.First(x => x.Name == target.Title);
            var transition = StateMachine.Transitions.FirstOrDefault(x => x.FromStateId == sourceState.Id && x.ToStateId == targetState.Id);
            if (transition == null)
            {
                transition = new()
                    {
                        FromStateId = sourceState.Id,
                        ToStateId = targetState.Id
                    };
                StateMachine.Transitions.Add(transition);
                await EditTransitionAsync(link);
            }
        }
    }

    async Task EditTransitionAsync(BaseLinkModel link)
    {
        var source = ((Blazor.Diagrams.Core.Anchors.SinglePortAnchor)link.Source).Port.Parent;
        var target = ((Blazor.Diagrams.Core.Anchors.SinglePortAnchor)link.Target).Port.Parent;
        var sourceState = StateMachine.States.First(x => x.Name == source.Title);
        var targetState = StateMachine.States.First(x => x.Name == target.Title);
        var transition = StateMachine.Transitions.First(x => x.FromStateId == sourceState.Id && x.ToStateId == targetState.Id);
        var result = await DialogService.ShowDialogAsync<Dialogs.EditTransitionDialog, Transition>("Edit Transition", dialog =>
        {
            dialog.Transition = transition;
        });
        if (result != null)
        {
            transition.Condition = result.Condition;
            transition.Description = result.Description;

            link.Labels.Clear();
            link.AddLabel(transition.Description ?? result.Condition ?? "true");
            link.Refresh();
        }
    }

    async Task EditStateAsync(NodeModel node)
    {
        var state = StateMachine.States.First(x => x.Name == node.Title);
        var result = await DialogService.ShowDialogAsync<Dialogs.AddOrEditStateDialog, State>("Edit State", dialog =>
        {
            dialog.State = state;
            dialog.ExistingStateNames = StateMachine.States.Where(x => x.Id != state.Id).Select(x => x.Name).Distinct().ToHashSet();
        });
        if (result != null)
        {
            state.Name = result.Name;
            state.Description = result.Description;
            state.EntryAction = result.EntryAction;

            node.Title = state.Name;
            node.Refresh();
        }
    }

    async void DiagramPointerDoubleClickAsync(Model? model, Blazor.Diagrams.Core.Events.PointerEventArgs args)
    {
        if (model is NodeModel node)
        {
            await EditStateAsync(node);
        }
        else if (model is LinkModel link)
        {
            await EditTransitionAsync(link);
        }
    }

    void Restart()
    {
        StateMachineService.RestartMachineState(StateMachine.Id);
    }

    async Task SaveAsync()
    {
        var removedStates = StateMachine.States.Where(x => !Diagram.Nodes.Any(y => y.Title == x.Name)).ToList();
        foreach (var state in removedStates)
        {
            StateMachine.States.Remove(state);
        }
        foreach (var state in StateMachine.States)
        {
            var uiData = new NodeUIData();
            var node = Diagram.Nodes.First(x => x.Title == state.Name);
            uiData.X = (int)node.Position.X;
            uiData.Y = (int)node.Position.Y;
            state.UIData = System.Text.Json.JsonSerializer.Serialize(uiData);
        }
        await StateMachineService.UpdateMachineStateAsync(StateMachine);
    }
}
