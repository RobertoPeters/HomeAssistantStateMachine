@page "/"
@using HomeAssistantStateMachine.Services
@using HomeAssistantStateMachine.Models
@using System.Collections.Concurrent
@inject Radzen.DialogService DialogService
@inject StateMachineService StateMachineService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>HASM - State Machines</PageTitle>

<h1>State Machines</h1>

@if (statemachines != null)
{
    <RadzenButton Text="Add" Click="@AddStateMachineAsync" />
    <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.SimpleWithMenu"
                    AllowSorting="true"
                    PageSize="20"
                    Density="Density.Compact"
                    RowClick="@OnRowClick"
                    AllowPaging="true"
                    AllowVirtualization="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@statemachines.Values.ToList()"
                    TItem="StateMachineInfo">
        <Columns>
            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Property="@nameof(StateMachineInfo.EditId)"
                                  Filterable="false"
                                  Sortable="false"
                                  Resizable="false"
                                  Width="96px"
                                  Title="">
                <Template Context="statemachine">
                    <div @onclick:stopPropagation="true">
                        <RadzenIcon style="cursor:pointer;" Icon="edit" @onclick="@(() => NavigationManager.NavigateTo($"/editstatemachine/{statemachine.Id}"))" />
                        <RadzenIcon style="cursor:pointer;" Icon="open_in_new" @onclick="@(() => JSRuntime.InvokeVoidAsync("navigateToTarget", $"/editstatemachine/{statemachine.Id}", "_blank"))" />
                    </div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Property="@nameof(StateMachineInfo.Name)"
                                  Title="Name" />

            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Property="@nameof(StateMachineInfo.Mode)"
                                  Title="Mode" />

            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Property="@nameof(StateMachineInfo.State)"
                                  Title="State" />

            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Property="@nameof(StateMachineInfo.Enabled)"
                                  Title="Enabled">
                <Template Context="statemachine">
                    @(statemachine.Enabled ? "Yes" : "No")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="StateMachineInfo"
                                  Filterable="false"
                                  Sortable="false"
                                  Property="@nameof(StateMachineInfo.Id)"
                                  Title="">
                <Template Context="statemachine">
                    <div @onclick:stopPropagation="true">
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.ExtraSmall" Text="Copy" Click="@(() => CopyStateMachineAsync(statemachine))" />
                        <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Text="Delete" Click="@(() => DeleteStateMachineAsync(statemachine))" />
                    </div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    private class StateMachineInfo
    {
        public StateMachineHandler StateMachineHandler { get; set; } = null!;

        public int EditId => 0;
        public int Id => StateMachineHandler.StateMachine.Id;
        public string Name => StateMachineHandler.StateMachine.Name;
        public bool Enabled => StateMachineHandler.StateMachine.Enabled;
        public string? Mode => StateMachineHandler.RunningState.ToString();
        public string? State => StateMachineHandler.CurrentState?.Name;
    }
    private readonly ConcurrentDictionary<int, StateMachineInfo> statemachines = [];

    private RadzenDataGrid<StateMachineInfo>? grid;

    protected override void OnInitialized()
    {
        var allStateMachines = StateMachineService.GetStateMachines();
        foreach (var statemachine in allStateMachines)
        {
            var v = new StateMachineInfo()
                {
                    StateMachineHandler = statemachine
                };
            statemachines.TryAdd(statemachine.StateMachine.Id, v);
            statemachine.StateChanged += StateMachineStateChanged;
        }
        base.OnInitialized();
    }

    private void StateMachineStateChanged(object? sender, State? e)
    {
        InvokeAsync(grid!.Reload);
    }

    public void Dispose()
    {
        foreach (var statemachine in statemachines.Values.ToList())
        {
            statemachine.StateMachineHandler.StateChanged -= StateMachineStateChanged;
        };
    }

    private async Task AddStateMachineAsync()
    {
        var result = await DialogService.ShowDialogAsync<Dialogs.AddOrEditStateMachineDialog, StateMachine>("Add State Machine", dialog => { });
        if (result != null)
        {
            await CreateStateMachineAsync(result);
        }
    }

    private async Task<StateMachineHandler?> CreateStateMachineAsync(StateMachine statemachine)
    {
        var stateMachineHandler = await StateMachineService.CreateMachineStateAsync(statemachine);
        if (stateMachineHandler != null)
        {
            var v = new StateMachineInfo()
                {
                    StateMachineHandler = stateMachineHandler
                };
            statemachines.TryAdd(stateMachineHandler.StateMachine.Id, v);
            stateMachineHandler.StateChanged += StateMachineStateChanged;
            grid!.Data = statemachines.Values.ToList();
        }
        return stateMachineHandler;
    }

    void OnRowClick(DataGridRowMouseEventArgs<StateMachineInfo> item)
    {
        NavigationManager.NavigateTo($"/editstatemachine/{item.Data.StateMachineHandler.StateMachine.Id}");
    }

    private async Task DeleteStateMachineAsync(StateMachineInfo mi)
    {
        if (await DialogService.ShowNoYesConfirmationDialogAsync("Delete State Machine", $"Are you sure you want to delete the State Machine '{mi.Name}'?") == Dialogs.ConfirmationDialog.DialogButton.Yes)
        {
            mi.StateMachineHandler.StateChanged -= StateMachineStateChanged;
            statemachines.TryRemove(mi.Id, out var _);
            await StateMachineService.DeleteStateMachineHandler(mi.Id);
            grid!.Data = statemachines.Values.ToList();
        }
    }

    private async Task CopyStateMachineAsync(StateMachineInfo mi)
    {
        var newStateMachine = new StateMachine();
        newStateMachine.PreStartAction = mi.StateMachineHandler.StateMachine.PreStartAction;
        newStateMachine.PreScheduleAction = mi.StateMachineHandler.StateMachine.PreScheduleAction;
        newStateMachine.Enabled = false;
        var index = 1;
        newStateMachine.Name = $"{mi.Name}({index})";
        while (statemachines.Values.Any(x => x.Name == newStateMachine.Name))
        {
            index++;
            newStateMachine.Name = $"{mi.Name}({index})";
        }
        var handler = await CreateStateMachineAsync(newStateMachine);
        if (handler != null)
        {
            newStateMachine = await StateMachineService.GetStateMachineDataAsync(handler.StateMachine.Id);
            var srcStatemachine = await StateMachineService.GetStateMachineDataAsync(mi.Id);
            foreach (var state in srcStatemachine.States)
            {
                state.StateMachineId = newStateMachine.Id;
                state.StateMachine = null;
                newStateMachine.States.Add(state);
            }
            foreach (var transition in srcStatemachine.Transitions)
            {
                transition.StateMachineId = newStateMachine.Id;
                transition.StateMachine = null;
                transition.FromState = null;
                transition.ToState = null;
                newStateMachine.Transitions.Add(transition);
            }
            await StateMachineService.UpdateMachineStateAsync(newStateMachine);
        }
    }
}