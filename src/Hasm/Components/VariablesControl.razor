@using Hasm.Services
@using Hasm.Models
@using System.Collections.Concurrent
@inject DialogService DialogService
@inject VariableService VariableService
@inject DataService DataService
@inject UIEventRegistration UIEventRegistration
@implements IDisposable

@if (gridData != null)
{
    <RadzenDataGrid @ref="grid" AllowFiltering="true"
                    AllowColumnResize="true"
                    AllowAlternatingRows="false"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    FilterMode="FilterMode.SimpleWithMenu"
                    AllowSorting="true"
                    PageSize="20"
                    AllowColumnPicking="AllowColumnPicking"
                    AllowColumnReorder="true"
                    AllowPaging="true"
                    AllowVirtualization="true"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    Data="@gridData"
                    TItem="VariableService.VariableInfo">
        <Template Context="variable">
            <div class="row">
                <div class="col-2">
                    <RadzenCheckBox TValue="bool"
                                    Change="@(() => MockingChangedAsync(variable))"
                                    @bind-Value="variable.IsMocking" />
                    <RadzenLabel Text="Mocking" />
                </div>
                <div class="col-4">
                    @if (variable.Variable.MockingValues?.Any() == true)
                    {
                        <RadzenDropDown Data="@variable.Variable.MockingValues"
                                        Change="@(() => MockingChangedAsync(variable))"
                                        AllowClear="true"
                                        @bind-Value=@variable.MockingValue />
                    }
                    else
                    {
                        <RadzenTextBox @bind-Value=@variable.MockingValue
                                       Change="@(() => MockingChangedAsync(variable))" />

                    }
                </div>
            </div>
        </Template>
        <Columns>
            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Variable.Id"
                                  Title="Id" />

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Variable.Name"
                                  Title="Name" />

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Variable.ClientId"
                                  FilterValue="@filterClient"
                                  Title="Client">
                <FilterTemplate>
                    <RadzenDropDown Data="@clients.Values"
                                    AllowClear="true"
                                    TextProperty="Name"
                                    ValueProperty="Id"
                                    Disabled="@(Client != null)"
                                    Change="@grid!.Reload"
                                    @bind-Value=@filterClient />
                </FilterTemplate>
                <Template Context="variable">
                    @clients[variable.Variable.ClientId].Name
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Variable.StateMachineId"
                                  FilterValue="@filterStateMachine"                                  
                                  Title="State Machine">
                <FilterTemplate>
                    <RadzenDropDown Data="@statemachines.Values"
                                    AllowClear="true"
                                    TextProperty="Name"
                                    Disabled="@(StateMachine != null)"
                                    ValueProperty="Id"
                                    Change="@grid!.Reload"
                                    @bind-Value=@filterStateMachine />
                </FilterTemplate>
                <Template Context="variable">
                    @($"{(variable.Variable.StateMachineId == null ? "" : statemachines[variable.Variable.StateMachineId.Value].Name)}")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Variable.Data"
                                  Title="Data" />

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="Value"
                                  Title="Value" />

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Property="VariableValue.Value"
                                  Title="Real Value" />

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Filterable="false"
                                  Property="VariableValue.Update"
                                  Title="Update">
                <Template Context="variable">
                    @(variable.VariableValue.Update.ToLocalTime().ToString("ddd dd MMM HH:mm.sss"))
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="VariableService.VariableInfo"
                                  Filterable="false"
                                  Sortable="false"
                                  Property="Variable.Id"
                                  Title="">
                <Template Context="variable">
                    <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Text="Delete" Click="@(() => DeleteVariableAsync(variable))" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    [Parameter]
    public Client? Client { get; set; }

    [Parameter]
    public StateMachine? StateMachine { get; set; }

    [Parameter]
    public bool AllowColumnPicking { get; set; } = true;

    private ConcurrentDictionary<int, VariableService.VariableInfo> variables = [];
    private ConcurrentDictionary<int, Client> clients = [];
    private ConcurrentDictionary<int, StateMachine> statemachines = [];

    private RadzenDataGrid<VariableService.VariableInfo>? grid;
    private List<VariableService.VariableInfo>? gridData;
    private int? filterClient = null;
    private int? filterStateMachine = null;

    protected override void OnInitialized()
    {
        clients = new ConcurrentDictionary<int, Client>(DataService.GetClients().ToDictionary(x => x.Id, x => x));
        statemachines = new ConcurrentDictionary<int, StateMachine>(DataService.GetStateMachines().ToDictionary(x => x.Id, x => x));
        variables = new ConcurrentDictionary<int, VariableService.VariableInfo>(VariableService.GetVariables().ToDictionary(x => x.Variable.Id, x => x));
        gridData = variables.Values.ToList();
        UIEventRegistration.VariablesChanged += VariablesChanged;
        UIEventRegistration.VariableValuesChanged += VariableValuesChanged;
        UIEventRegistration.ClientHandlerChanged += ClientHandlerChanged;
        UIEventRegistration.StateMachineHandlerChanged += StateMachineHandlerChanged;
        if (Client != null)
        {
            filterClient = Client.Id;
        }
        if (StateMachine != null)
        {
            filterStateMachine = StateMachine.Id;
        }
        base.OnInitialized();
    }

    private void UpdateGridData()
    {
        gridData = variables.Values.ToList();
        if (grid != null)
        {
            grid.Data = gridData;
            grid!.Reload();
        }
    }

    private async Task MockingChangedAsync(VariableService.VariableInfo variable)
    {
        await VariableService.SetVariableValuesAsync([(variable.Variable.Id, variable.IsMocking, variable.MockingValue)]);
    }

    private void VariableValuesChanged(object? sender, List<VariableService.VariableValueInfo> variablesInfos)
    {
        foreach (var variable in variablesInfos)
        {
            this.variables.AddOrUpdate(variable.Variable.Id, variable, (_, _) => variable);
        }
        InvokeAsync(() =>
        {
            grid?.Reload();
        });
    }

    private void VariablesChanged(object? sender, List<VariableService.VariableInfo> variablesInfos)
    {
        bool updateNeeded = false;
        foreach (var variable in variablesInfos)
        {
            if (variable.Variable.Id < 0)
            {
                if (this.variables.TryRemove(-variable.Variable.Id, out _))
                {
                    updateNeeded = true;
                }
            }
            else
            {
                if (!variables.TryGetValue(variable.Variable.Id, out _))
                {
                    updateNeeded = true;
                }
                this.variables.AddOrUpdate(variable.Variable.Id, variable, (_, _) => variable);
            }
        }
        InvokeAsync(() =>
        {
            if (updateNeeded)
            {
                UpdateGridData();
            }
            else
            {
                grid?.Reload();
            }
        });
    }

    private void ClientHandlerChanged(object? sender, IClientHandler client)
    {
        if (client.Client.Id < 0)
        {
            clients.TryRemove(-client.Client.Id, out _);
        }
        else
        {
            clients.AddOrUpdate(client.Client.Id, client.Client, (_, _) => client.Client);
        }
        if (grid != null)
        {
            InvokeAsync(grid.Reload);
        }
    }

    private void StateMachineHandlerChanged(object? sender, StateMachineHandler statemachine)
    {
        if (statemachine.StateMachine.Id < 0)
        {
            statemachines.TryRemove(-statemachine.StateMachine.Id, out _);
        }
        else
        {
            statemachines.AddOrUpdate(statemachine.StateMachine.Id, statemachine.StateMachine, (_, _) => statemachine.StateMachine);
        }
        if (grid != null)
        {
            InvokeAsync(grid.Reload);
        }
    }

    private async Task DeleteVariableAsync(VariableService.VariableInfo variable)
    {
        await VariableService.DeleteVariableAsync(variable.Variable.Id);
    }

    public void Dispose()
    {
        UIEventRegistration.VariableValuesChanged -= VariableValuesChanged;
        UIEventRegistration.StateMachineHandlerChanged -= StateMachineHandlerChanged;
        UIEventRegistration.ClientHandlerChanged -= ClientHandlerChanged;
        UIEventRegistration.VariablesChanged += VariablesChanged;
    }
}