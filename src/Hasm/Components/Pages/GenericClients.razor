@page "/genericclients"
@using HassClient.WS
@using Hasm.Services
@inject ClientService ClientService
@inject DialogService DialogService
@inject DataService DataService
@inject UIEventRegistration UIEventRegistration
@implements IDisposable

<PageTitle>HASM - Generic Clients</PageTitle>

<h1>Generic Clients</h1>

@if (clients != null)
{
    <RadzenButton Size="ButtonSize.Small" Text="Add Generic Client" Click="@(() => AddOrEditClientAsync(null))" />

    foreach (var client in clients.Values)
    {
        <RadzenCard onclick="@(() => AddOrEditClientAsync(client))">
            <div>@client.Client.Name</div>
             <div>@(client.Client.Enabled ? "Enabled" : "Disabled")</div>
            <div @onclick:stopPropagation="true">
                <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.ExtraSmall" Text="Delete" Click="@(() => OnDeleteAsync(client))" />
            </div>
        </RadzenCard>
    }
}

@code {

    private Dictionary<int, GenericClientHandler>? clients;

    protected override void OnInitialized()
    {
        UIEventRegistration.ClientHandlerChanged += ClientHandlerChanged;
        clients = ClientService.GetClients<GenericClientHandler>().ToDictionary(x => x.Client.Id, x => x);
        base.OnInitialized();
    }

    private void ClientHandlerChanged(object? sender, IClientHandler clientHandler)
    {
        if (clientHandler.Client.ClientType != Models.ClientType.HomeAssistant)
        {
            return;
        }

        if (clientHandler.Client.Id < 0)
        {
            clients?.Remove(-clientHandler.Client.Id);
        }
        else
        {
            clients?.TryAdd(clientHandler.Client.Id, (GenericClientHandler)clientHandler);
        }

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UIEventRegistration.ClientHandlerChanged -= ClientHandlerChanged;
    }

    private async Task OnDeleteAsync(GenericClientHandler client)
    {
        if (await DialogService.ShowNoYesConfirmationDialogAsync("Delete Generic Client", $"Are you sure you want to delete the Generic Client '{client.Client.Name}'?") == Dialogs.ConfirmationDialog.DialogButton.Yes)
        {
			await DataService.DeleteClientAsync(client.Client);
        }
    }

    private async Task AddOrEditClientAsync(GenericClientHandler? client)
    {
        await DialogService.ShowDialogAsync<Dialogs.AddOrEditGenericClientDialog>($"{(client == null ? "Add" : "Edit")} Generic Client", dialog =>
        {
            dialog.Id = client?.Client.Id;
        });
    }
}