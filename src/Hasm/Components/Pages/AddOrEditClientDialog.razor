@using Hasm.Components.Dialogs
@using Hasm.Models
@using Hasm.Services
@using Hasm.Services.Clients
@inject DataService DataService
@inherits DialogBase

@if (Model != null)
{
    <RadzenTemplateForm @ref="Form" Data="@Model" TItem="Client">
        <RadzenStack>
            <RadzenFormField Text="Type *" Variant="@Variant.Outlined">
                <ChildContent>
                    <RadzenDropDown Data="(Models.ClientType[])Enum.GetValues(typeof(Models.ClientType))" @bind-Value="@Model!.ClientType" Name="ClientType" Disabled=@((Id ?? 0) != 0) />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="ClientType" Text="This field is required" />
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Enabled" Variant="@Variant.Outlined">
                <RadzenRadioButtonList @bind-Value="@Model!.Enabled" TValue="bool" class="rz-m-4 rz-mt-8">
                    <Items>
                        <RadzenRadioButtonListItem Text="Yes" Value="true" />
                        <RadzenRadioButtonListItem Text="No" Value="false" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenFormField>
            <RadzenFormField Text="Name *" Variant="@Variant.Outlined">
                <ChildContent>
                    <RadzenTextBox @bind-Value="@Model!.Name" Name="Name" Placeholder="name" spellcheck="false" />
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="Name" Text="This field is required" />
                    <RadzenCustomValidator Component="Name" Validator="@(() => !ExistingClientNames.Contains(Model!.Name))" Text="Name should be unique" />
                </Helper>
            </RadzenFormField>
            @if (Model.ClientType == ClientType.HomeAssistant)
            {
                <RadzenFormField Text="Host *" Variant="@Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@HAClientProperties!.Host" Name="Host" Placeholder="http://localhost:8123" spellcheck="false" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Host" Text="This field is required" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Token *" Variant="@Variant.Outlined">
                    <ChildContent>
                        <RadzenPassword @bind-Value="@HAClientProperties!.Token" Name="Token" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Token" Text="This field is required" />
                    </Helper>
                </RadzenFormField>
            }
            @if (Model.ClientType == ClientType.Mqtt)
            {
                <RadzenFormField Text="Host *" Variant="@Variant.Outlined">
                    <ChildContent>
                        <RadzenTextBox @bind-Value="@MqttClientProperties!.Host" Name="Host" Placeholder="test.mosquitto.org" spellcheck="false" />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Host" Text="This field is required" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Tls" Variant="@Variant.Outlined">
                    <RadzenRadioButtonList @bind-Value="@MqttClientProperties!.Tls" TValue="bool" class="rz-m-4 rz-mt-8">
                        <Items>
                            <RadzenRadioButtonListItem Text="Yes" Value="true" />
                            <RadzenRadioButtonListItem Text="No" Value="false" />
                        </Items>
                    </RadzenRadioButtonList>
                </RadzenFormField>
                <RadzenFormField Text="Username" Variant="@Variant.Outlined">
                    <RadzenTextBox @bind-Value="@MqttClientProperties!.Username" Name="Username" Placeholder="Username" spellcheck="false" />
                </RadzenFormField>
                <RadzenFormField Text="Password" Variant="@Variant.Outlined">
                    <RadzenPassword @bind-Value="@MqttClientProperties!.Password" Name="Password" />
                </RadzenFormField>
            }
            <RadzenButton ButtonType="ButtonType.Button" Text="OK" Click="@OnSubmit" />
        </RadzenStack>
    </RadzenTemplateForm>
}

@code {
    protected override bool ShowClose => true;
    protected override bool IsPersistent => false;
    protected override bool CloseDialogOnOverlayClick => true;
    protected override int? WidthInPixels => 1400;

    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public HashSet<string> ExistingClientNames { get; set; } = [];

    private Client? Model;
    private HAClientHandler.ClientProperties HAClientProperties = new();
    private MqttClientHandler.ClientProperties MqttClientProperties = new();
    private RadzenTemplateForm<Client>? Form;

    protected override void OnInitialized()
    {
        var allClients = DataService.GetClients();
        Id ??= 0;
        if (Id == 0)
        {
            Model = new();
        }
        else
        {
            Model = allClients.First(x => x.Id == Id).CopyObject()!;
            Model.Id = Id.Value;
            if (!string.IsNullOrWhiteSpace(Model!.Data) && Model.ClientType == ClientType.HomeAssistant)
            {
                HAClientProperties = System.Text.Json.JsonSerializer.Deserialize<HAClientHandler.ClientProperties>(Model.Data) ?? new();
            }
            else if (!string.IsNullOrWhiteSpace(Model!.Data) && Model.ClientType == ClientType.Mqtt)
            {
                MqttClientProperties = System.Text.Json.JsonSerializer.Deserialize<MqttClientHandler.ClientProperties>(Model.Data) ?? new();
            }
        }
        ExistingClientNames = allClients.Where(x => x.Id != Id).Select(x => x.Name).ToHashSet();

        base.OnInitialized();
    }

    async Task OnSubmit()
    {
        Form!.EditContext.Validate();
        if (Form.IsValid)
        {
            if (Model!.ClientType == ClientType.HomeAssistant)
            {
                Model!.Data = System.Text.Json.JsonSerializer.Serialize(HAClientProperties);
            }
            else if (Model!.ClientType == ClientType.Mqtt)
            {
                Model!.Data = System.Text.Json.JsonSerializer.Serialize(MqttClientProperties);
            }
            await DataService.AddOrUpdateClientAsync(Model);
            Close();
        }
    }
}
