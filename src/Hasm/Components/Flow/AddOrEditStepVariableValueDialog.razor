@using Hasm.Components.Dialogs
@using Hasm.Models
@using Hasm.Services
@using Hasm.Services.Automations
@using Hasm.Services.Automations.Flow
@inject Services.DataService DataService
@inherits ResultDialogBase<StepVariableValue>

<RadzenTemplateForm @ref="Form" Data="@Model" TItem="StepVariableValue">
    <RadzenStack>
        <RadzenFormField Text="Variable name *" Variant="@Variant.Outlined">
            <ChildContent>
                <RadzenTextBox @bind-Value="@Model!.VariableName" Name="VariableName" spellcheck="false" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="VariableName" Text="This field is required" />
            </Helper>
        </RadzenFormField>
    </RadzenStack>
    <RadzenButton ButtonType="ButtonType.Button" Text="OK" Click="@OnSubmit" />
</RadzenTemplateForm>


@code {
    protected override bool ShowClose => true;
    protected override bool IsPersistent => false;
    protected override bool CloseDialogOnOverlayClick => true;
    protected override int? WidthInPixels => 1400;

    [Parameter]
    public StepVariableValue? Step { get; set; }

    [Parameter]
    public Automation? Automation { get; set; }


    private StepVariableValue? Model;
    private RadzenTemplateForm<StepVariableValue>? Form;

    protected override void OnInitialized()
    {
        if (Step == null)
        {
            Step = new StepVariableValue();
            Step.Initialize();
        }
        Model = Step.CopyObject();

        base.OnInitialized();
    }

    void OnSubmit()
    {
        Form!.EditContext.Validate();
        if (Form.IsValid)
        {
            Close(Model);
        }
    }

}
