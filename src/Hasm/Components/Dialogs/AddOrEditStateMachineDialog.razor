@using Hasm.Models
@using Hasm.Services
@inherits ResultDialogBase<StateMachine>

<RadzenTemplateForm @ref="Form" Data="@Model" TItem="StateMachine">
    <RadzenStack>
        <RadzenFormField Text="Name *" Variant="@Variant.Outlined">
            <ChildContent>
                <RadzenTextBox @bind-Value="@Model!.Name" Name="Name" spellcheck="false" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="Name" Text="This field is required" />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Sub State Machine" Variant="@Variant.Outlined">
            <RadzenRadioButtonList @bind-Value="@Model!.IsSubStateMachine" TValue="bool" class="rz-m-4 rz-mt-8">
                <Items>
                    <RadzenRadioButtonListItem Text="Yes" Value="true" />
                    <RadzenRadioButtonListItem Text="No" Value="false" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenFormField>
        @if (!Model!.IsSubStateMachine)
        {
            <RadzenFormField Text="Enabled" Variant="@Variant.Outlined">
                <RadzenRadioButtonList @bind-Value="@Model!.Enabled" TValue="bool" class="rz-m-4 rz-mt-8">
                    <Items>
                        <RadzenRadioButtonListItem Text="Yes" Value="true" />
                        <RadzenRadioButtonListItem Text="No" Value="false" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenFormField>
        }
        @if (Model!.IsSubStateMachine)
        {
            <RadzenFormField Text="Sub State Machine Variables" Variant="@Variant.Outlined">
                <RadzenDataGrid Data="@Model!.SubStateMachineParameters"
                                TItem="SubStateMachineParameter"
                                RowCreate="@OnCreateRow"
                                RowUpdate="@OnUpdateRow"
                                @ref=parametersGrid
                                EditMode="DataGridEditMode.Multiple">
                    <HeaderTemplate>
                        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Add Parameter" Click="@InsertRow" />
                    </HeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn Property="@nameof(SubStateMachineParameter.Name)" Title="Name">
                            <EditTemplate Context="parameter">
                                <RadzenTextBox Style="width:200px; display: block" @bind-Value="parameter.Name" Name="ParameterName" />
                                <RadzenRequiredValidator Text="Name is required" Component="ParameterName" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(SubStateMachineParameter.ScriptVariableName)" Title="Script Variable Name">
                            <EditTemplate Context="parameter">
                                <RadzenTextBox Style="width:200px; display: block" @bind-Value="parameter.ScriptVariableName" Name="ScriptVariableName" />
                                <RadzenRequiredValidator Text="Script variable name is required" Component="ScriptVariableName" Popup="true" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(SubStateMachineParameter.IsInput)" Title="Is input">
                            <Template Context="parameter">
                                @(parameter.IsInput ? "Yes" : "No")
                            </Template>
                            <EditTemplate Context="parameter">
                                <RadzenRadioButtonList @bind-Value="@parameter.IsInput" TValue="bool" class="rz-m-4 rz-mt-8">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Yes" Value="true" />
                                        <RadzenRadioButtonListItem Text="No" Value="false" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(SubStateMachineParameter.IsOutput)" Title="Is output">
                            <Template Context="parameter">
                                @(parameter.IsOutput ? "Yes" : "No")
                            </Template>
                            <EditTemplate Context="parameter">
                                <RadzenRadioButtonList @bind-Value="@parameter.IsOutput" TValue="bool" class="rz-m-4 rz-mt-8">
                                    <Items>
                                        <RadzenRadioButtonListItem Text="Yes" Value="true" />
                                        <RadzenRadioButtonListItem Text="No" Value="false" />
                                    </Items>
                                </RadzenRadioButtonList>
                            </EditTemplate>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Context="parameter" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                            <Template Context="parameter">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRowAsync(parameter))" @onclick:stopPropagation="true" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRowAsync(parameter))" @onclick:stopPropagation="true" />
                            </Template>
                            <EditTemplate Context="parameter">
                                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowAsync(parameter))" aria-label="Save" />
                                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(parameter))" aria-label="Cancel" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRowAsync(parameter))" aria-label="Delete" />
                            </EditTemplate>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenFormField>
        }
        <RadzenFormField Text="Pre Start Action" Variant="@Variant.Outlined">
            <RadzenTextArea @bind-Value="@Model!.PreStartAction" Name="PreStartAction" Rows="10" spellcheck="false" />
        </RadzenFormField>
        <RadzenFormField Text="Pre Schedule Action" Variant="@Variant.Outlined">
            <RadzenTextArea @bind-Value="@Model!.PreScheduleAction" Name="PreScheduleAction" Rows="10" spellcheck="false" />
        </RadzenFormField>
    </RadzenStack>
    <RadzenButton ButtonType="ButtonType.Button" Text="OK" Click="@OnSubmit" />
    <RadzenButton ButtonType="ButtonType.Button" Text="System script" Click="@OnSystemScriptAsync" />
</RadzenTemplateForm>


@code {
    protected override bool ShowClose => true;
    protected override bool IsPersistent => false;
    protected override bool CloseDialogOnOverlayClick => true;
    protected override int? WidthInPixels => 1400;

    [Parameter]
    public StateMachine? StateMachine { get; set; }

    private StateMachine? Model;
    private RadzenTemplateForm<StateMachine>? Form;

    private RadzenDataGrid<SubStateMachineParameter>? parametersGrid;
    private List<SubStateMachineParameter> parametersToInsert = [];
    private List<SubStateMachineParameter> parametersToUpdate = [];

    protected override void OnInitialized()
    {
        if (StateMachine == null)
        {
            StateMachine = new StateMachine();
            StateMachine.Enabled = false;
        }
        Model = StateMachine.CopyObject();
        base.OnInitialized();
    }

    void OnSubmit()
    {
        Form!.EditContext.Validate();
        if (Form.IsValid)
        {
            Close(Model!);
        }
    }

    async Task OnSystemScriptAsync()
    {
        await DialogService.ShowDialogAsync<Dialogs.ShowScriptDialog>("System Script", dialog =>
        {
            dialog.Script = Services.StateMachineHandler.SystemScript;
        });
    }

    void Reset()
    {
        parametersToInsert.Clear();
        parametersToUpdate.Clear();
    }

    void Reset(SubStateMachineParameter parameter)
    {
        parametersToInsert.Remove(parameter);
        parametersToUpdate.Remove(parameter);
    }

    async Task InsertRow()
    {
        if (!parametersGrid!.IsValid) return;

        var parameter = new SubStateMachineParameter();
        parametersToInsert.Add(parameter);
        await parametersGrid.InsertRow(parameter);
    }

    void OnCreateRow(SubStateMachineParameter parameter)
    {
        Model!.SubStateMachineParameters.Add(parameter);
        parametersToInsert.Remove(parameter);
    }

    void OnUpdateRow(SubStateMachineParameter parameter)
    {
        Reset(parameter);
        var index = Model!.SubStateMachineParameters.FindIndex(x => x.Id == parameter.Id);
        if (index >= 0)
        {
            Model!.SubStateMachineParameters[index] = parameter;
        }
    }

    async Task EditRowAsync(SubStateMachineParameter parameter)
    {
        if (!parametersGrid!.IsValid) return;

        parametersToUpdate.Add(parameter);
        await parametersGrid.EditRow(parameter);
    }

    async Task SaveRowAsync(SubStateMachineParameter parameter)
    {
        await parametersGrid!.UpdateRow(parameter);
    }

    void CancelEdit(SubStateMachineParameter parameter)
    {
        Reset(parameter);

        parametersGrid!.CancelEditRow(parameter);
    }

    async Task DeleteRowAsync(SubStateMachineParameter parameter)
    {
        Reset(parameter);

        if (Model!.SubStateMachineParameters.Contains(parameter))
        {
            Model!.SubStateMachineParameters.Remove(parameter);
        }
        else
        {
            parametersGrid!.CancelEditRow(parameter);
        }
        await parametersGrid!.Reload();
    }
}
