@using Hasm.Models
@using Hasm.Services
@inherits ResultDialogBase<StateMachine>

<RadzenTemplateForm @ref="Form" Data="@Model" TItem="StateMachine">
    <RadzenStack>
        <RadzenFormField Text="Name *" Variant="@Variant.Outlined">
            <ChildContent>
                <RadzenTextBox @bind-Value="@Model!.Name" Name="Name" spellcheck="false" />
            </ChildContent>
            <Helper>
                <RadzenRequiredValidator Component="Name" Text="This field is required" />
            </Helper>
        </RadzenFormField>
        <RadzenFormField Text="Enabled" Variant="@Variant.Outlined">
            <RadzenRadioButtonList @bind-Value="@Model!.Enabled" TValue="bool" class="rz-m-4 rz-mt-8">
                <Items>
                    <RadzenRadioButtonListItem Text="Yes" Value="true" />
                    <RadzenRadioButtonListItem Text="No" Value="false" />
                </Items>
            </RadzenRadioButtonList>
        </RadzenFormField>
        <RadzenFormField Text="Pre Start Action" Variant="@Variant.Outlined">
            <RadzenTextArea @bind-Value="@Model!.PreStartAction" Name="PreStartAction" Rows="10" spellcheck="false" />
        </RadzenFormField>
        <RadzenFormField Text="Pre Schedule Action" Variant="@Variant.Outlined">
            <RadzenTextArea @bind-Value="@Model!.PreScheduleAction" Name="PreScheduleAction" Rows="10" spellcheck="false" />
        </RadzenFormField>
    </RadzenStack>
    <RadzenButton ButtonType="ButtonType.Button" Text="OK" Click="@OnSubmitAsync" />
    <RadzenButton ButtonType="ButtonType.Button" Text="System script" Click="@OnSystemScriptAsync" />
</RadzenTemplateForm>


@code {
    protected override bool ShowClose => true;
    protected override bool IsPersistent => false;
    protected override bool CloseDialogOnOverlayClick => true;
    protected override int? WidthInPixels => 1400;

    [Parameter]
    public StateMachine? StateMachine { get; set; }

    private StateMachine? Model;
    private RadzenTemplateForm<StateMachine>? Form;

    protected override void OnInitialized()
    {
        if (StateMachine == null)
        {
            StateMachine = new StateMachine();
            StateMachine.Enabled = false;
        }
        Model = StateMachine.CopyObject();
        base.OnInitialized();
    }

    async Task OnSubmitAsync()
    {
        Form!.EditContext.Validate();
        if (Form.IsValid)
        {
            Close(Model!);
        };
    }

    async Task OnSystemScriptAsync()
    {
        await DialogService.ShowDialogAsync<Dialogs.ShowScriptDialog>("System Script", dialog =>
        {
           dialog.Script = Services.StateMachineHandler.SystemScript;
        });
    }

}
