// <auto-generated />
using System;
using HomeAssistantStateMaching.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeAssistantStateMaching.Migrations
{
    [DbContext(typeof(HasmDbContext))]
    [Migration("20240327144454_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.3");

            modelBuilder.Entity("HomeAssistantStateMaching.Models.HAClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Handle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StateMachineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StateMachineId");

                    b.ToTable("HAClients");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EntryAction")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Handle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("StateMachineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UIData")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StateMachineId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.StateMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Handle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StateMachines");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.Transition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Condition")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromStateId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Handle")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StateMachineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToStateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UIData")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromStateId");

                    b.HasIndex("StateMachineId");

                    b.HasIndex("ToStateId");

                    b.ToTable("Transitions");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.HAClient", b =>
                {
                    b.HasOne("HomeAssistantStateMaching.Models.StateMachine", null)
                        .WithMany("HAClients")
                        .HasForeignKey("StateMachineId");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.State", b =>
                {
                    b.HasOne("HomeAssistantStateMaching.Models.StateMachine", null)
                        .WithMany("States")
                        .HasForeignKey("StateMachineId");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.Transition", b =>
                {
                    b.HasOne("HomeAssistantStateMaching.Models.State", "FromState")
                        .WithMany()
                        .HasForeignKey("FromStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAssistantStateMaching.Models.StateMachine", null)
                        .WithMany("Transitions")
                        .HasForeignKey("StateMachineId");

                    b.HasOne("HomeAssistantStateMaching.Models.State", "ToState")
                        .WithMany()
                        .HasForeignKey("ToStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromState");

                    b.Navigation("ToState");
                });

            modelBuilder.Entity("HomeAssistantStateMaching.Models.StateMachine", b =>
                {
                    b.Navigation("HAClients");

                    b.Navigation("States");

                    b.Navigation("Transitions");
                });
#pragma warning restore 612, 618
        }
    }
}
